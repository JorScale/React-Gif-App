{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExportApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExportApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAmB5C,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAQ,IAC1BR,GAAe,SAAAS,GAAI,OAAIP,GAAJ,mBAAmBO,OACtCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAnBa,SAACP,GACtBF,EAAcE,EAAEQ,OAAOF,a,+BCTlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEII,MAAOF,GAFX,cAEbG,EAFa,gBAGIA,EAAUC,OAHd,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAM,IAAD,EACvB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAYZM,GAZY,4CAAH,sDCEPO,EAAc,SAAC,GAAmB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEjC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCHHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECAX,SAACA,GAAc,IAAD,EACZd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAyBtC,OAlBAC,qBAAU,WAGNxB,EAAQC,GACPwB,MAAK,SAAAC,GAEFH,EACI,CACIf,KAAMkB,EACNL,SAAS,SAOvB,CAAEpB,IAEGqB,EDtBuBK,CAAa1B,GAA/Ba,EAHuB,EAG5BN,KAAYa,EAHgB,EAGhBA,QAKnB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDhB,IACjDoB,GAAW,2CACb,qBAAKJ,UAAU,YAAf,SAEQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEIA,GADEA,EAAIC,aEhBrBgB,EAAe,WAAM,MAEMzC,mBAAS,CAAC,WAFhB,mBAEvB0C,EAFuB,KAEX3C,EAFW,KAQ9B,OAEI,cADA,CACA,2BAAI,oBAAI+B,UAAW,MAAf,yCACA,+CACA,cAAC,EAAD,CAAa/B,cAAeA,IAC5B,uBACA,6BAMQ2C,EAAWnB,KAAK,SAAAT,GAAQ,OAIpB,aAHA,CAGC,EAAD,CACqBA,SAAaA,GAAxBA,Y,MCtBlC6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.c6a20d79.chunk.js","sourcesContent":["import React,{useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    //Use state me devuelve un arreglo para cambiar un estado\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    //Funcion donde actualizo el estado 'cambia el estado'\r\n    const handleInputChange= (e)=>{\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    // funcion dondee envio los nuevos valores que obtenga del input\r\n    const handleSubmit = (e)=>{\r\n        e.preventDefault();//Para que no se refresque la pagina\r\n        //Condicion para no aceptar vacios y que se limpie despues de cada enter\r\n        if( inputValue.trim().length >2){\r\n            setCategories( cats =>[inputValue, ...cats]);// callback para agregar los nuevos valores al arreglo\r\n            setInputValue('');\r\n        }\r\n        \r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange= {handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\n//Proptypes para obligar a que reciba algo\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","export const getGifs = async(category)=>{\r\n    const url= `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category)}&limit=10&api_key=U6ZcX4qGcBdHoInWjeC3hUnocXMJjmlU`\r\n    const respuesta= await fetch( url );\r\n    const { data } = await respuesta.json();\r\n\r\n    const gifs = data.map(img=>{\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( {title, url}) => {\r\n    //console.log({id, title, url});\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    //const[images,setImages] = useState([]);\r\n    const {data:images,loading} = useFetchGifs(category);\r\n\r\n    \r\n\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n            { loading && <p>Loading...</p>}\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map( img  => (\r\n                        <GifGridItem \r\n                        key= {img.id}\r\n                        {...img}\r\n                        //img = {img}\r\n                        />\r\n                        \r\n                    ))\r\n                }\r\n                \r\n\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import {useState,useEffect}from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    //Para renderizar por una vez\r\n    useEffect(() =>{\r\n        \r\n\r\n        getGifs(category)\r\n        .then(imgs=>{\r\n\r\n            setState(\r\n                {\r\n                    data: imgs,\r\n                    loading: false\r\n                }\r\n            );\r\n            \r\n\r\n        } )\r\n\r\n    },[ category ])\r\n\r\n    return state // {data: [] loading: true};\r\n}\r\n","import React, {useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory';//Para unir mi otro componente\r\nimport { GifGrid } from './components/GifGrid';\r\n// componente\r\nexport const GifExportApp = () => {\r\n    /* const categories = ['Atack on titan', 'Dragon ball', 'Sword Art Online']; */\r\n    const [categories, setCategories] = useState(['Ichigo']);\r\n/*  const handleAdd = ()=>{\r\n        // setCategories([...categories,'Pery']); \r\n        setCategories(cats=>[...cats ,'Slam Dunk']);//Recibe un callback y agregar un nuevo elemento\r\n    } */\r\n\r\n    return (\r\n        //Fragment\r\n        <>  <h2 className= \"msj\">Aprendiendo React by Jorddy</h2>\r\n            <h2>Buscar imagen</h2>\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr/>\r\n            <ol>\r\n                { \r\n                /* map llama a la función callback provista una vez por elemento de un array, en orden,\r\n                    y construye un nuevo array con los resultados. ... callback es llamada con tres argumentos:\r\n                    el valor del elemento,\r\n                     el índice del elemento, y el objeto array que se está recorriendo. */\r\n                    categories.map( category =>(\r\n                        //Retorno el arreglo y lo muestro en lista con su indice 'Key'\r\n                        //return <li key={category} > {category}</li>\r\n\r\n                        <GifGrid \r\n                            key={ category } category = { category }\r\n                            \r\n                        \r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {GifExportApp} from './GifExportApp'\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExportApp />,\n  document.getElementById('root')\n);\n\n\n\n\n\n"],"sourceRoot":""}